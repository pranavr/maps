<!DOCTYPE html>
<html>
<head>
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBZnvqy9HEpG-LAQwm_AxDOegMciI9jgP4&libraries=geometry&sensor=false"></script>
<script type="text/javascript" src="/Cambridge_P_formatted.js"></script>
<script type="text/javascript">



//var map;
//var directionsService = new google.maps.DirectionsService();
function initialize() {
      
var map;
var mapCenter = new google.maps.LatLng(42.365551,-71.103911);
var directionsService = new google.maps.DirectionsService();

var color;
var center;
var grid = {
    centers : [],
    opacities : []
};

var maxVal = 0;
var minVal = 100000;

var clickable = true;


      var map = new google.maps.Map(document.getElementById("map_canvas"), {
        zoom: 15,
        center: mapCenter,
        mapTypeId: google.maps.MapTypeId.ROAD
      });


      var styles = [
        {
          "stylers": [
            { "visibility": "simplified" },
            { "hue": "#00b2ff" },
            { "weight": 0.5 },
            { "saturation": -51 },
            { "gamma": 1.26 },
            { "lightness": 100 }
          ]
        },
        { "featureType": "poi",
          "stylers": [
          {"visibility": "off"}
          ]
        }
      ]


      map.setOptions({styles: styles});


      var points  = [];

      for (var i = 0; i < CDataPop.length; i++){

        var point = new google.maps.LatLng(CDataPop[i].lat, CDataPop[i].lng);
        
        points.push(CDataPop[i]);
      }                                                                                                         


      var filter = [];
      for (var j =0; j<points.length; j++){
        //console.log("val = " + points[j].count);

        if (j < points.length){
            filter.push(points[j]);

        }

      }

      var selected = [];
      for (var i = 0; i<filter.length; i++){
        selected.push(filter[i]);
        if (filter[i].count >= maxVal ){
          maxVal = filter[i].count;
        } 

        if (filter[i].count <= minVal ){
          minVal = filter[i].count;
        }
      }





      google.maps.event.addListener(map, "click", function(event) {
        if (clickable){
          var lat = event.latLng.lat();
          var lng = event.latLng.lng();
          var colors = ['orange', 'red', 'green','blue', 'black','purple','cyan', 'grey'];

          var randomIndex=Math.floor(Math.random()*colors.length);
          color = colors[randomIndex];
          center = new google.maps.LatLng(lat,lng);
          console.log("LatLng= " + center);
          clickable = false;
          console.log("mx = " + maxVal + " mv = " + minVal);
          makeGrid();

        }
        

      });

     var gridCirclesOpts;
     var gridCircles;
      
     function makeGrid() {
            var pointCenter = center;
            var dim = 2000;
            var half_width = dim/2;
            var half_height = dim/2;
            var cellwidth = 200;
            var distFromCenter = Math.sqrt(Math.pow(half_width,2) + Math.pow(half_height, 2));
            NW = google.maps.geometry.spherical.computeOffset(pointCenter, distFromCenter,315);
            NS = google.maps.geometry.spherical.computeOffset(NW,cellwidth,90);
            SS = google.maps.geometry.spherical.computeOffset(NW,cellwidth,180);

            var numCells = Math.round(dim/cellwidth);

            for(var i=0; i < numCells; i++){
              
                NE = google.maps.geometry.spherical.computeOffset(NS,i*cellwidth,180)
                SW = google.maps.geometry.spherical.computeOffset(SS,i*cellwidth,180)

                      for(var j=0; j < numCells ; j++){
                        
                        var cellCenter = google.maps.geometry.spherical.computeOffset(NE,(Math.sqrt(2) *cellwidth)/2, 225);

                        
                        grid.centers.push(cellCenter);

                  
                        gridCirclesOpts = {
                                strokeColor: color,
                                strokeOpacity: 0.8,
                                strokeWeight: 2,
                                fillColor: color,
                                fillOpacity: 0.0,
                                map: map,
                                center: cellCenter,
                                radius: 100
                          };

                        //gridCircles = new google.maps.Circle(gridCirclesOpts);


                        // var temp = 0;
                        // var count = 0;
                        // for (i in selected) {
                          
                        //   var pt = new google.maps.LatLng(selected[i].lat, selected[i].lng);
                        //   if (gridCircles.getBounds().contains(pt)) {
                        //     temp += selected[i].count;
                        //     count++;
                        //     console.log(temp + ", " + count);
                        //   }
                        // }

                        // var avg = temp/(1.0 * count);
                        // temp = 0;
                        // count = 0;
                        // var gridValue = (avg - minVal) / (maxVal - minVal);
                        // console.log("va  =" + gridValue);
                        // grid.opacities.push(gridValue);
                              
                        //gridCircles= new google.maps.Circle(circle3Options);

                        

                        var SW = google.maps.geometry.spherical.computeOffset(SW,cellwidth,90)
                        var NE = google.maps.geometry.spherical.computeOffset(NE,cellwidth,90)
                      }
              }

        pathController();


      }

      var currentIndex =0;
      var startCircles;
      function pathController(){
        if (currentIndex < grid.centers.length){
          console.log("cIn = " + currentIndex);
          startCircles = new google.maps.Circle({
            strokeColor: color,
            strokeOpacity: 0.2,
            strokeWeight: 2,
            fillColor: color,
            fillOpacity: 0.2,
            map: map,
            center: grid.centers[currentIndex],
            radius: 5
          })
          setTimeout(drawPaths, 2000);
        } 


      }
      
      
            
      
      

      function drawPaths(){

        var request = {
                origin: grid.centers[currentIndex],
                destination:center,
                travelMode: google.maps.DirectionsTravelMode.WALKING
            };
          
            var rendererOptions = {
                preserveViewport: true,
                suppressMarkers:true,
                routeIndex:currentIndex
            };


            directionsService.route(request, function(response,status){
              if (status == google.maps.DirectionsStatus.OK){
                var polylineOptionsActual = new google.maps.Polyline({
                  strokeColor: color,
                  strokeOpacity: 0.05,
                  strokeWeight: 2
                });

                
                directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);
                directionsDisplay.setMap(map);
                directionsDisplay.setOptions({polylineOptions: polylineOptionsActual});
                directionsDisplay.setDirections(response);

                currentIndex++;
              } else {

                console.log("STATUS=" + status);
              }
            });
            
            if (currentIndex == grid.centers.length -1){
              console.log("done!");
              console.log("done");
              grid.centers = [];
              grid.opacities = [];
              currentIndex = 0;
              clickable = true;
              alert("You can click another point on the map now!");
            } else {
              
              pathController();
            }
      }



    

}

google.maps.event.addDomListener(window, 'load', initialize);



</script>



</head>


<body>
  <div id="map_canvas" style="width:100%; height:2000px;"></div>